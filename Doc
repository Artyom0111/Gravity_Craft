
## Классы

### Player

Класс `Player` управляет поведением игрока, включая прыжки, столкновения с платформами и взаимодействия с другими игровыми объектами.

#### Атрибуты

- `onGround (bool)`: Указывает, находится ли игрок на земле.
- `platforms (pygame.sprite.Group)`: Группа платформ, с которыми игрок может столкнуться.
- `died (bool)`: Указывает, умер ли игрок.
- `win (bool)`: Указывает, выиграл ли игрок.
- `image (pygame.Surface)`: Изображение игрока.
- `rect (pygame.Rect)`: Прямоугольник, представляющий положение и размер игрока.
- `jump_amount (int)`: Сила прыжка игрока.
- `isjump (bool)`: Указывает, прыгает ли игрок.
- `vel (Vector2)`: Вектор скорости игрока.

#### Методы

- `__init__(self, image, platforms, pos, *groups)`: Инициализирует объект игрока.
- `collide(self, yvel, platforms)`: Обрабатывает столкновения с платформами.
- `jump(self)`: Устанавливает вертикальную скорость для прыжка.
- `update(self)`: Обновляет положение игрока и проверяет столкновения.

### Draw

Класс `Draw` служит базовым классом для всех объектов, которые можно рисовать в игре.

#### Атрибуты

- `image (pygame.Surface)`: Изображение объекта.
- `rect (pygame.Rect)`: Прямоугольник, представляющий положение и размер объекта.

#### Методы

- `__init__(self, image, pos, *groups)`: Инициализирует рисуемый объект.

### Platform

Класс `Platform` представляет платформы, на которых игрок может стоять.

#### Методы

- `__init__(self, image, pos, *groups)`: Инициализирует объект платформы.

### Spike

Класс `Spike` представляет шипы, которые могут убить игрока при столкновении.

#### Методы

- `__init__(self, image, pos, *groups)`: Инициализирует объект шипа.

### Orb

Класс `Orb` представляет орбы, которые игрок может собирать для специальных возможностей.

#### Методы

- `__init__(self, image, pos, *groups)`: Инициализирует объект Orb.

### End

Класс `End` представляет конечную точку уровня.

#### Методы

- `__init__(self, image, pos, *groups)`: Инициализирует объект конечной точки.

## Функции

### init_level(map)

Инициализирует уровень на основе предоставленной карты.

#### Параметры

- `map (list)`: Список строк, представляющий макет уровня.

### blitRotate(surf, image, pos, originpos)

Поворачивает изображение вокруг определенной точки и рисует его на поверхности.

#### Параметры

- `surf (pygame.Surface)`: Поверхность для рисования.
- `image (pygame.Surface)`: Изображение для поворота и рисования.
- `pos (tuple)`: Позиция для рисования изображения.
- `originpos (tuple)`: Точка, вокруг которой изображение вращается.

### won_screen()

Отображает экран победы, когда игрок завершает уровень.

### death_screen()

Отображает экран смерти, когда игрок сталкивается с шипом.

### eval_outcome(won, died)

Оценивает исход игры на основе того, выиграл ли игрок или умер.

#### Параметры

- `won (bool)`: Указывает, выиграл ли игрок.
- `died (bool)`: Указывает, умер ли игрок.

### block_map(level_num)

Загружает карту уровня из CSV файла.

#### Параметры

- `level_num (str)`: Имя CSV файла, содержащего данные уровня.

#### Возвращает

- `list`: Двумерный список, представляющий макет уровня.

### start_screen()

Отображает экран начала для выбора уровня.

### reset()

Сбрасывает состояние игры, инициализируя необходимые объекты и загружая данные уровня.

### move_map()

Перемещает игровые элементы в зависимости от положения игрока, создавая эффект прокрутки.

### wait_for_key()

Ждет, пока игрок нажмет клавишу, чтобы продолжить игру.

### resize(img, size=(40, 40))

Изменяет размер изображения до заданных размеров.

#### Параметры

- `img (pygame.Surface)`: Изображение для изменения размера.
- `size (tuple)`: Новый размер для изображения.

#### Возвращает

- `pygame.Surface`: Изображение с измененным размером.

## Игровой цикл

Основной игровой цикл обрабатывает события, обновляет состояние игры и отображает игровые объекты на экране. Включает в себя:

- Обработку ввода от игрока (прыжки и движение).
- Обнаружение столкновений и реакции на них.
- Обновление экрана и рендеринг.

## Активы

- **Изображения**: Аватар игрока, платформы, шипы, орбы, фоны и т.д.
- **Музыка**: Файлы фоновой музыки.